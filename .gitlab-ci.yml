variables:
  ANDROID_COMPILE_SDK: "28"
  ANDROID_BUILD_TOOLS: "28.0.2"
  ANDROID_SDK_TOOLS:   "4333796"

# Cache modules in between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - node_modules/

build:
  stage: build
  image: node:8  
  script:
    - yarn install
    - yarn run test

android:
  stage: apps
  image: jruby:9.2-jdk
  before_script:
    - curl -sL https://deb.nodesource.com/setup_8.x | bash -
    - apt-get install -y nodejs
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
    - unzip -d android-sdk-linux android-sdk.zip
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    # temporarily disable checking for EPIPE error and use yes to accept all licenses
    - set +o pipefail
    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
    - set -o pipefail    
  script:
    - cd android
    - bundle install
    - mkdir -p test-results/fastlane
    - bundle exec fastlane test
    - mv fastlane/report.xml test-results/fastlane

ios:
  stage: apps
  script:
    - echo "running ios"

stages:
  - build
  - apps

# .job_template: &job_deploy
#   stage: deploy
#   before_script:
#     - npm install
#   # tags:
#   #   - rnbuild
#   after_script:
#     - cp $OUTPUT_PATH.$FILE_TYPE $CI_PROJECT_NAME-$CI_COMMIT_REF_NAME.$FILE_TYPE
#   artifacts:
#     name: "$CI_PROJECT_NAME-$PLATFORM-$CI_COMMIT_REF_NAME"
#     paths:
#     - $CI_PROJECT_NAME-$CI_COMMIT_REF_NAME.$FILE_TYPE
#     expire_in: 7 days
#   when: manual

# deploy:android:prod:
#   variables:
#     PLATFORM: android
#     FILE_TYPE: apk
#     OUTPUT_PATH: android/app/build/outputs/apk/app-release
#   <<: *job_deploy
#   script:
#     - cd android && ./gradlew assembleRelease -PMYAPP_RELEASE_STORE_PASSWORD=$KEYSTORE_PASSWORD -PMYAPP_RELEASE_KEY_PASSWORD=$KEYSTORE_PASSWORD
  
# deploy:ios:prod:
#   variables:
#     PLATFORM: ios
#     FILE_TYPE: ipa
#     OUTPUT_PATH: ./$CI_PROJECT_NAME
#   <<: *job_deploy
#   script:
#     - export PACKAGE_NAME=$(node -p -e "require('./package.json').name")
#     - cd ios
#     - xcodebuild -scheme $PACKAGE_NAME archive -archivePath $PACKAGE_NAME.xcarchive -allowProvisioningUpdates
#     - xcodebuild -exportArchive -archivePath ./$PACKAGE_NAME.xcarchive -exportPath . -exportOptionsPlist $PACKAGE_NAME/Info.plist
#     - mv $PACKAGE_NAME.ipa ../$PACKAGE_NAME.ipa